package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/go-git/go-git/v5"
)

var tplPackage = template.Must(template.New("").Parse(
	`// Package {{ .PkgName }} contains message definitions (autogenerated).
//nolint:golint
package {{ .PkgName }}
`))

var tplTest = template.Must(template.New("").Parse(
	`//nolint:golint
package {{ .PkgName }}

import (
	"testing"
)

func TestCompileOk(t *testing.T) {
}
`))

func shellCommand(cmdstr string) error {
	fmt.Fprintf(os.Stderr, "%s\n", cmdstr)
	cmd := exec.Command("sh", "-c", cmdstr)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	return cmd.Run()
}

func processDir(name string, dir string) error {
	fmt.Fprintf(os.Stderr, "[%s]\n", name)

	os.Mkdir(filepath.Join("pkg", "msgs", name), 0755)

	err := func() error {
		f, err := os.Create(filepath.Join("pkg", "msgs", name, "package.go"))
		if err != nil {
			return err
		}
		defer f.Close()

		return tplPackage.Execute(f, map[string]interface{}{
			"PkgName": name,
		})
	}()
	if err != nil {
		return err
	}

	err = func() error {
		f, err := os.Create(filepath.Join("pkg", "msgs", name, "package_test.go"))
		if err != nil {
			return err
		}
		defer f.Close()

		return tplTest.Execute(f, map[string]interface{}{
			"PkgName": name,
		})
	}()
	if err != nil {
		return err
	}

	files, err := ioutil.ReadDir(dir)
	if err != nil {
		return err
	}

	for _, f := range files {
		if strings.HasSuffix(f.Name(), ".msg") {
			err = shellCommand(fmt.Sprintf("go run ./cmd/msg-import --gopackage=%s --rospackage=%s %s > %s",
				name,
				name,
				filepath.Join(dir, f.Name()),
				filepath.Join("pkg", "msgs", name, strings.TrimSuffix(f.Name(), ".msg")+".go")))
			if err != nil {
				os.Remove(filepath.Join("pkg", "msgs", name, strings.TrimSuffix(f.Name(), ".msg")+".go"))
				continue
			}
		}
	}

	return nil
}

func processRepo(name string, repo string, subdir string) error {
	dir, err := ioutil.TempDir("", "goroslib")
	if err != nil {
		return err
	}
	defer os.RemoveAll(dir)

	_, err = git.PlainClone(dir, false, &git.CloneOptions{
		URL:   repo,
		Depth: 1,
	})
	if err != nil {
		return err
	}

	return processDir(name, filepath.Join(dir, subdir))
}

func processCommonMsgs() error {
	dir, err := ioutil.TempDir("", "goroslib")
	if err != nil {
		return err
	}
	defer os.RemoveAll(dir)

	_, err = git.PlainClone(dir, false, &git.CloneOptions{
		URL:   "https://github.com/ros/common_msgs",
		Depth: 1,
	})
	if err != nil {
		return err
	}

	err = filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if info.IsDir() && info.Name() == "msg" {
			return processDir(filepath.Base(filepath.Dir(path)), path)
		}
		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func run() error {
	err := shellCommand("rm -rf pkg/msgs/*/")
	if err != nil {
		return err
	}

	err = processRepo("std_msgs", "https://github.com/ros/std_msgs", "msg")
	if err != nil {
		return err
	}

	err = processRepo("rosgraph_msgs", "https://github.com/ros/ros_comm_msgs", "rosgraph_msgs/msg")
	if err != nil {
		return err
	}

	err = processCommonMsgs()
	if err != nil {
		return err
	}

	return nil
}

func main() {
	err := run()
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERR: %s\n", err)
		os.Exit(1)
	}
}
